diff --git a/cmake/tweedledumConfig.cmake.in b/cmake/tweedledumConfig.cmake.in
new file mode 100644
index 0000000..30118f0
--- /dev/null
+++ b/cmake/tweedledumConfig.cmake.in
@@ -0,0 +1,18 @@
+# This file exports the tweedledum::tweedledum CMake target which should be
+# passed to the # target_link_libraries command.
+
+
+
+if(TARGET tweedledum::tweedledum)
+  # Protect against double definitions due to orevious call or add_subdirectory()
+  return()
+endif()
+
+find_package(Eigen3  CONFIG REQUIRED)
+find_package(fmt  CONFIG REQUIRED)
+find_package(nlohmann_json  REQUIRED)
+set(THREADS_PREFER_PTHREAD_FLAG ON)
+find_package(Threads REQUIRED)
+
+include("${CMAKE_CURRENT_LIST_DIR}/tweedledumTargetsExternal.cmake")
+include("${CMAKE_CURRENT_LIST_DIR}/tweedledumTargets.cmake")
diff --git a/CMakeLists.txt b/CMakeLists.txt
index d81e701..93a8745 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -12,6 +12,7 @@ option(TWEEDLEDUM_EXAMPLES "Build examples" OFF)
 option(TWEEDLEDUM_PYBINDS "Build python bindings" ON)
 option(TWEEDLEDUM_TESTS "Build tests" OFF)
 option(TWEEDLEDUM_USE_EXTERNAL_PYBIND11 "Use an external pybind11 library" OFF)
+option(TWEEDLEDUM_USE_EXTERNAL_FMT "Use an external fmt library" ON)
 option(TWEEDLEDUM_ENABLE_COVERAGE "Enable coverage reporting for gcc/clang" OFF)
 option(ENABLE_BILL_Z3 "Enable Z3 interface for bill library" OFF)
 
@@ -31,22 +32,50 @@ endif()
 # 3rd-party libraries
 # =============================================================================
 list(APPEND CMAKE_MODULE_PATH "${CMAKE_SOURCE_DIR}/cmake")
-find_package(Eigen3 3.3 REQUIRED)
-find_package(fmt 8.1.1 REQUIRED)
-find_package(nlohmann_json 3.9.0 REQUIRED)
-find_package(phmap 1.0.0 REQUIRED)
+set(EIGEN3_VERSION_MIN 3.3)
+find_package(Eigen3 ${EIGEN3_VERSION_MIN} CONFIG REQUIRED)
+set(FMT_VERSION_MIN 8.1.1)
+find_package(fmt ${FMT_VERSION_MIN} CONFIG REQUIRED)
+set(JSON_VERSION_MIN 3.9.0)
+find_package(nlohmann_json ${JSON_VERSION_MIN} CONFIG REQUIRED)
+
 add_subdirectory(external)
 
+include(CheckCXXSourceCompiles)
+check_cxx_source_compiles(
+ [[
+#ifdef __has_include
+# if __has_include(<version>)
+#   include <version>
+# endif
+#endif
+int main() {
+#if __has_include(<filesystem>) && __cpp_lib_filesystem >= 201703
+    return 0;
+#else
+#error std::filesystem not supported
+#endif
+}
+ ]]
+  has_filesystem_include)
+
+if(has_filesystem_include)
+  set(tweedledum_filesystem_library)
+else()
+  find_package(Boost COMPONENTS filesystem)
+  set(tweedledum_filesystem_library Boost::filesystem)
+endif()
+
 # Python bindings
 # =============================================================================
 if(TWEEDLEDUM_PYBINDS AND TWEEDLEDUM_MASTER_PROJECT)
     pybind11_add_module(_tweedledum MODULE)
     target_include_directories(_tweedledum PRIVATE ${PROJECT_SOURCE_DIR}/include)
     target_link_libraries(_tweedledum PRIVATE
-        Eigen3::Eigen3
+        Eigen3::Eigen
         fmt::fmt-header-only
         mockturtle
-        $<$<CXX_COMPILER_ID:GNU>:stdc++fs>)
+        ${tweedledum_filesystem_library})
     target_compile_options(_tweedledum PRIVATE
         # clang/gcc warnings
         $<$<OR:$<CXX_COMPILER_ID:Clang>,$<CXX_COMPILER_ID:GNU>>:
@@ -59,18 +73,28 @@ if(TWEEDLEDUM_PYBINDS AND TWEEDLEDUM_MASTER_PROJECT)
     endif()
 endif()
 
+find_package(SymEngine 0.6.0 REQUIRED CONFIG PATHS /usr/local/symbolic)
+if(NOT TARGET SymEngine::SymEngine)
+  add_library(SymEngine::SymEngine ALIAS symengine)
+endif()
+
 # Library
 # =============================================================================
+
+set(tweedledum_INCLUDE_DIR
+    "${CMAKE_CURRENT_LIST_DIR}/include"
+    CACHE INTERNAL "Directory where tweedledum headers are located")
+
 add_library(tweedledum ${tweedledum_exclude})
-target_include_directories(tweedledum ${tweedledum_system} PUBLIC
-    $<BUILD_INTERFACE:${PROJECT_SOURCE_DIR}/include>
-    $<INSTALL_INTERFACE:include>)
+target_include_directories(tweedledum ${tweedledum_system} PUBLIC $<BUILD_INTERFACE:${tweedledum_INCLUDE_DIR}>
+                                                                  $<INSTALL_INTERFACE:include>)
 target_link_libraries(tweedledum PUBLIC
-    Eigen3::Eigen3
+    Eigen3::Eigen
+    SymEngine::SymEngine
     fmt::fmt-header-only
     mockturtle
-    nlohmann_json
-    $<$<CXX_COMPILER_ID:GNU>:stdc++fs>)
+    nlohmann_json::nlohmann_json
+    ${tweedledum_filesystem_library})
 target_compile_options(tweedledum PRIVATE
     # clang/gcc warnings
     $<$<OR:$<CXX_COMPILER_ID:Clang>,$<CXX_COMPILER_ID:GNU>>:
@@ -80,21 +104,59 @@ target_compile_options(tweedledum PRIVATE
     -O0 -g --coverage -fprofile-arcs -ftest-coverage>
     # MSVC 
     $<$<CXX_COMPILER_ID:MSVC>:/Wall /utf-8>)
+target_compile_features(tweedledum PUBLIC cxx_std_17)
 add_subdirectory(src)
 
 # Install
 # =============================================================================
 include(GNUInstallDirs)
-install(TARGETS tweedledum ${tweedledum_exclude}
-    EXPORT tweedledumConfig
-    ARCHIVE  DESTINATION ${CMAKE_INSTALL_LIBDIR}
-    LIBRARY  DESTINATION ${CMAKE_INSTALL_LIBDIR}
-    RUNTIME  DESTINATION ${CMAKE_INSTALL_BINDIR}
-)
-install(DIRECTORY include/ ${tweedledum_exclude}
-    DESTINATION ${CMAKE_INSTALL_INCLUDEDIR})
-# install(EXPORT tweedledumConfig DESTINATION share/tweedledum/cmake)
-# export(TARGETS tweedledum mockturtle FILE tweedledumConfig.cmake)
+include(CMakePackageConfigHelpers)
+
+install(DIRECTORY ${tweedledum_INCLUDE_DIR}/tweedledum DESTINATION ${CMAKE_INSTALL_INCLUDEDIR})
+install(FILES ${CMAKE_CURRENT_LIST_DIR}/tests/check_unitary.h
+              ${CMAKE_CURRENT_LIST_DIR}/tests/check_permutation.h
+              ${CMAKE_CURRENT_LIST_DIR}/tests/check_prime.h
+              ${CMAKE_CURRENT_LIST_DIR}/tests/check_mapping.h
+        DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/tweedledum/test)
+
+set(TWEEDLEDUM_CMAKECONFIG_INSTALL_DIR
+    "${CMAKE_INSTALL_DATAROOTDIR}/cmake/${PROJECT_NAME}"
+    CACHE STRING "install path for tweedledumConfig.cmake")
+
+if(IS_ABSOLUTE "${CMAKE_INSTALL_INCLUDEDIR}")
+  set(tweedledum_INCLUDEDIR "${CMAKE_INSTALL_FULL_INCLUDEDIR}")
+else()
+  set(tweedledum_INCLUDEDIR "\$\{PACKAGE_PREFIX_DIR\}/${CMAKE_INSTALL_INCLUDEDIR}")
+endif()
+
+configure_package_config_file(
+  cmake/${PROJECT_NAME}Config.cmake.in "${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}Config.cmake"
+  INSTALL_DESTINATION ${TWEEDLEDUM_CMAKECONFIG_INSTALL_DIR})
+
+write_basic_package_version_file(
+  ${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}ConfigVersion.cmake
+  VERSION ${PROJECT_VERSION}
+  COMPATIBILITY AnyNewerVersion)
+
+install(FILES ${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}Config.cmake
+              ${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}ConfigVersion.cmake
+        DESTINATION ${TWEEDLEDUM_CMAKECONFIG_INSTALL_DIR})
+
+if(NOT TWEEDLEDUM_EXPORT_NAME)
+  set(TWEEDLEDUM_EXPORT_NAME "${PROJECT_NAME}Targets")
+endif()
+
+install(
+  TARGETS tweedledum
+  EXPORT "${TWEEDLEDUM_EXPORT_NAME}"
+  ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
+  LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
+  RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR})
+
+install(
+  EXPORT "${TWEEDLEDUM_EXPORT_NAME}"
+  NAMESPACE "tweedledum::"
+  DESTINATION ${TWEEDLEDUM_CMAKECONFIG_INSTALL_DIR})
 
 # Examples
 # =============================================================================
@@ -102,8 +159,16 @@ if(TWEEDLEDUM_EXAMPLES AND NOT SKBUILD)
   add_subdirectory(examples)
 endif()
 
+# Python bindings
+# =============================================================================
+if(TWEEDLEDUM_PYBINDS)
+  # add_subdirectory(python)
+endif()
+
 # Tests
 # =============================================================================
-if(TWEEDLEDUM_MASTER_PROJECT AND TWEEDLEDUM_TESTS AND NOT SKBUILD)
+if(TWEEDLEDUM_MASTER_PROJECT
+   AND TWEEDLEDUM_TESTS
+   AND NOT SKBUILD)
   add_subdirectory(tests)
 endif()
diff --git a/cmake/FindEigen3.cmake b/cmake/FindEigen3.cmake
deleted file mode 100644
index 1a42100..0000000
--- a/cmake/FindEigen3.cmake
+++ /dev/null
@@ -1,92 +0,0 @@
-# Distributed under the MIT License (See accompanying file /LICENSE)
-#[=======================================================================[.rst:
-FindEigen3
--------
-
-Finds the Eigen3 library.
-
-Imported Targets
-^^^^^^^^^^^^^^^^
-
-This module provides the following imported targets, if found:
-
-``Eigen3::Eigen3``
-  The Eigen3 library
-
-Result Variables
-^^^^^^^^^^^^^^^^
-
-This will define the following variables:
-
-``Eigen3_FOUND``
-  True if the system has the Eigen3 library.
-``Eigen3_VERSION``
-  The version of the Eigen3 library which was found.
-``Eigen3_INCLUDE_DIRS``
-  Include directories needed to use Eigen3.
-
-Cache Variables
-^^^^^^^^^^^^^^^
-
-The following cache variables may also be set:
-
-``Eigen3_INCLUDE_DIR``
-  The directory containing ``signature_of_eigen3_matrix_library``.
-
-#]=======================================================================]
-find_package(PkgConfig)
-pkg_check_modules(PC_Eigen3 QUIET Eigen3)
-
-find_path(Eigen3_INCLUDE_DIR
-    NAMES Eigen/signature_of_eigen3_matrix_library
-    PATHS
-        ${PC_Eigen3_INCLUDE_DIRS}
-        ${CMAKE_INSTALL_PREFIX}/include
-        ${PROJECT_SOURCE_DIR}/external
-    PATH_SUFFIXES 
-        eigen3 eigen
-)
-
-macro(_Eigen3_get_version)
-    file(READ "${Eigen3_INCLUDE_DIR}/Eigen/src/Core/util/Macros.h" _header)
-    string(CONCAT VERSION_REGEX
-        "#define[ \t]+EIGEN_WORLD_VERSION[ \t]+([0-9]+)[ \n]+"
-        "#define[ \t]+EIGEN_MAJOR_VERSION[ \t]+([0-9]+)[ \n]+"
-        "#define[ \t]+EIGEN_MINOR_VERSION[ \t]+([0-9]+)")
-    string(REGEX MATCH ${VERSION_REGEX} _ "${_header}")
-    # Use math to skip leading zeros if any.
-    math(EXPR Eigen3_WORLD_VERSION ${CMAKE_MATCH_1})
-    math(EXPR Eigen3_MAJOR_VERSION ${CMAKE_MATCH_2})
-    math(EXPR Eigen3_MINOR_VERSION ${CMAKE_MATCH_3})
-    string(JOIN "." Eigen3_VERSION ${Eigen3_WORLD_VERSION}
-                                   ${Eigen3_MAJOR_VERSION}
-                                   ${Eigen3_MINOR_VERSION})
-endmacro()
-
-set(Eigen3_VERSION ${PC_Eigen3_VERSION})
-if (NOT Eigen3_VERSION)
-    _Eigen3_get_version()
-endif()
-
-include(FindPackageHandleStandardArgs)
-find_package_handle_standard_args(Eigen3
-    FOUND_VAR Eigen3_FOUND
-    REQUIRED_VARS
-        Eigen3_INCLUDE_DIR
-    VERSION_VAR Eigen3_VERSION
-)
-
-if(Eigen3_FOUND)
-    set(Eigen3_INCLUDE_DIRS ${Eigen3_INCLUDE_DIR})
-    set(Eigen3_DEFINITIONS ${PC_Eigen3_CFLAGS_OTHER})
-endif()
-
-if(Eigen3_FOUND AND NOT TARGET Eigen3::Eigen3)
-    add_library(Eigen3::Eigen3 INTERFACE IMPORTED)
-    set_target_properties(Eigen3::Eigen3 PROPERTIES
-        INTERFACE_COMPILE_OPTIONS "${PC_Eigen3_CFLAGS_OTHER}"
-        INTERFACE_INCLUDE_DIRECTORIES "${Eigen3_INCLUDE_DIR}"
-    )
-endif()
-
-mark_as_advanced(Eigen3_INCLUDE_DIR)
diff --git a/cmake/Findfmt.cmake b/cmake/Findfmt.cmake
deleted file mode 100644
index 629e343..0000000
--- a/cmake/Findfmt.cmake
+++ /dev/null
@@ -1,92 +0,0 @@
-# Distributed under the MIT License (See accompanying file /LICENSE)
-#[=======================================================================[.rst:
-Find fmt
--------
-
-Finds the fmt library.
-
-Imported Targets
-^^^^^^^^^^^^^^^^
-
-This module provides the following imported targets, if found:
-
-``fmt::fmt``
-  The fmt library
-
-Result Variables
-^^^^^^^^^^^^^^^^
-
-This will define the following variables:
-
-``fmt_FOUND``
-  True if the system has the fmt library.
-``fmt_VERSION``
-  The version of the fmt library which was found.
-``fmt_INCLUDE_DIRS``
-  Include directories needed to use fmt.
-
-Cache Variables
-^^^^^^^^^^^^^^^
-
-The following cache variables may also be set:
-
-``fmt_INCLUDE_DIR``
-  The directory containing ``fmt/format.h``.
-
-#]=======================================================================]
-find_package(PkgConfig)
-pkg_check_modules(PC_fmt QUIET fmt)
-
-find_path(fmt_INCLUDE_DIR
-    NAMES fmt/format.h
-    PATHS
-        ${PC_fmt_INCLUDE_DIRS}
-        ${CMAKE_INSTALL_PREFIX}/include
-        ${PROJECT_SOURCE_DIR}/external
-    PATH_SUFFIXES 
-        fmt/include
-)
-
-macro(_fmt_get_version)
-    # Get version from core.h
-    file(READ "${fmt_INCLUDE_DIR}/fmt/core.h" core_h)
-    if (NOT core_h MATCHES "FMT_VERSION ([0-9]+)([0-9][0-9])([0-9][0-9])")
-        message(FATAL_ERROR "Cannot get FMT_VERSION from core.h.")
-    endif ()
-    # Use math to skip leading zeros if any.
-    math(EXPR fmt_VERSION_MAJOR ${CMAKE_MATCH_1})
-    math(EXPR fmt_VERSION_MINOR ${CMAKE_MATCH_2})
-    math(EXPR fmt_VERSION_PATCH ${CMAKE_MATCH_3})
-    string(JOIN "." fmt_VERSION ${fmt_VERSION_MAJOR}
-                                ${fmt_VERSION_MINOR}
-                                ${fmt_VERSION_PATCH})
-endmacro()
-
-set(fmt_VERSION ${PC_fmt_VERSION})
-if (NOT fmt_VERSION)
-    _fmt_get_version()
-endif()
-
-include(FindPackageHandleStandardArgs)
-find_package_handle_standard_args(fmt
-    FOUND_VAR fmt_FOUND
-    REQUIRED_VARS
-        fmt_INCLUDE_DIR
-    VERSION_VAR fmt_VERSION
-)
-
-if(fmt_FOUND)
-    set(fmt_INCLUDE_DIRS ${fmt_INCLUDE_DIR})
-    set(fmt_DEFINITIONS ${PC_fmt_CFLAGS_OTHER})
-endif()
-
-if(fmt_FOUND AND NOT TARGET fmt::fmt-header-only)
-    add_library(fmt::fmt-header-only INTERFACE IMPORTED)
-    set_target_properties(fmt::fmt-header-only PROPERTIES
-        INTERFACE_COMPILE_OPTIONS "${PC_fmt_CFLAGS_OTHER}"
-        INTERFACE_INCLUDE_DIRECTORIES "${fmt_INCLUDE_DIR}"
-    )
-    target_compile_definitions(fmt::fmt-header-only INTERFACE FMT_HEADER_ONLY=1)
-endif()
-
-mark_as_advanced(fmt_INCLUDE_DIR)
diff --git a/cmake/Findnlohmann_json.cmake b/cmake/Findnlohmann_json.cmake
deleted file mode 100644
index 42e7b86..0000000
--- a/cmake/Findnlohmann_json.cmake
+++ /dev/null
@@ -1,93 +0,0 @@
-# Distributed under the MIT License (See accompanying file /LICENSE)
-#[=======================================================================[.rst:
-Find nlohmann_json
--------
-
-Finds the nlohmann_json library.
-
-Imported Targets
-^^^^^^^^^^^^^^^^
-
-This module provides the following imported targets, if found:
-
-``nlohmann_json``
-  The nlohmann_json library
-
-Result Variables
-^^^^^^^^^^^^^^^^
-
-This will define the following variables:
-
-``nlohmann_json_FOUND``
-  True if the system has the nlohmann_json library.
-``nlohmann_json_VERSION``
-  The version of the nlohmann_json library which was found.
-``nlohmann_json_INCLUDE_DIRS``
-  Include directories needed to use nlohmann_json.
-
-Cache Variables
-^^^^^^^^^^^^^^^
-
-The following cache variables may also be set:
-
-``nlohmann_json_INCLUDE_DIR``
-  The directory containing ``nlohmann/json.h``.
-
-#]=======================================================================]
-find_package(PkgConfig)
-pkg_check_modules(PC_nlohmann_json QUIET nlohmann_json)
-
-find_path(nlohmann_json_INCLUDE_DIR
-    NAMES nlohmann/json.hpp
-    PATHS
-        ${PC_nlohmann_json_INCLUDE_DIRS}
-        ${CMAKE_INSTALL_PREFIX}/include
-        ${PROJECT_SOURCE_DIR}/external
-    PATH_SUFFIXES 
-        nlohmann
-    
-)
-
-macro(_nlohmann_json_get_version)
-    file(READ "${nlohmann_json_INCLUDE_DIR}/nlohmann/json.hpp" _header)
-    string(CONCAT VERSION_REGEX
-        "#define[ \t]+NLOHMANN_JSON_VERSION_MAJOR[ \t]+([0-9]+)[ \n]+"
-        "#define[ \t]+NLOHMANN_JSON_VERSION_MINOR[ \t]+([0-9]+)[ \n]+"
-        "#define[ \t]+NLOHMANN_JSON_VERSION_PATCH[ \t]+([0-9]+)")
-    string(REGEX MATCH ${VERSION_REGEX} _ "${_header}")
-    # Use math to skip leading zeros if any.
-    math(EXPR nlohmann_json_VERSION_MAJOR ${CMAKE_MATCH_1})
-    math(EXPR nlohmann_json_VERSION_MINOR ${CMAKE_MATCH_2})
-    math(EXPR nlohmann_json_VERSION_PATCH ${CMAKE_MATCH_3})
-    string(JOIN "." nlohmann_json_VERSION ${nlohmann_json_VERSION_MAJOR}
-                                          ${nlohmann_json_VERSION_MINOR}
-                                          ${nlohmann_json_VERSION_PATCH})
-endmacro()
-
-set(nlohmann_json_VERSION ${PC_nlohmann_json_VERSION})
-if (NOT nlohmann_json_VERSION)
-    _nlohmann_json_get_version()
-endif()
-
-include(FindPackageHandleStandardArgs)
-find_package_handle_standard_args(nlohmann_json
-    FOUND_VAR nlohmann_json_FOUND
-    REQUIRED_VARS
-        nlohmann_json_INCLUDE_DIR
-    VERSION_VAR nlohmann_json_VERSION
-)
-
-if(nlohmann_json_FOUND)
-    set(nlohmann_json_INCLUDE_DIRS ${nlohmann_json_INCLUDE_DIR})
-    set(nlohmann_json_DEFINITIONS ${PC_nlohmann_json_CFLAGS_OTHER})
-endif()
-
-if(nlohmann_json_FOUND AND NOT TARGET nlohmann_json)
-    add_library(nlohmann_json INTERFACE IMPORTED)
-    set_target_properties(nlohmann_json PROPERTIES
-        INTERFACE_COMPILE_OPTIONS "${PC_nlohmann_json_CFLAGS_OTHER}"
-        INTERFACE_INCLUDE_DIRECTORIES "${nlohmann_json_INCLUDE_DIR}"
-    )
-endif()
-
-mark_as_advanced(nlohmann_json_INCLUDE_DIR)
diff --git a/cmake/Findphmap.cmake b/cmake/Findphmap.cmake
deleted file mode 100644
index 772ca81..0000000
--- a/cmake/Findphmap.cmake
+++ /dev/null
@@ -1,92 +0,0 @@
-# Distributed under the MIT License (See accompanying file /LICENSE)
-#[=======================================================================[.rst:
-Find phmap
--------
-
-Finds the phmap library.
-
-Imported Targets
-^^^^^^^^^^^^^^^^
-
-This module provides the following imported targets, if found:
-
-``parallel_hashmap``
-  The parallel_hashmap library
-
-Result Variables
-^^^^^^^^^^^^^^^^
-
-This will define the following variables:
-
-``PHMAP_FOUND``
-  True if the system has the phmap library.
-``PHMAP_VERSION``
-  The version of the phmap library which was found.
-``PHMAP_INCLUDE_DIRS``
-  Include directories needed to use phmap.
-
-Cache Variables
-^^^^^^^^^^^^^^^
-
-The following cache variables may also be set:
-
-``PHMAP_INCLUDE_DIR``
-  The directory containing ``parallel_hashmap/phmap_config.h``.
-
-#]=======================================================================]
-find_package(PkgConfig)
-pkg_check_modules(PC_phmap QUIET phmap)
-
-find_path(PHMAP_INCLUDE_DIR
-    NAMES parallel_hashmap/phmap_config.h
-    PATHS
-        ${PC_PHMAP_INCLUDE_DIRS}
-        ${CMAKE_INSTALL_PREFIX}/include
-        ${PROJECT_SOURCE_DIR}/external
-    PATH_SUFFIXES 
-        parallel_hashmap
-)
-
-macro(_phmap_get_version)
-    file(READ "${PHMAP_INCLUDE_DIR}/parallel_hashmap/phmap_config.h" _header)
-    string(CONCAT VERSION_REGEX
-        "#define[ \t]+PHMAP_VERSION_MAJOR[ \t]+([0-9]+)[ \n]+"
-        "#define[ \t]+PHMAP_VERSION_MINOR[ \t]+([0-9]+)[ \n]+"
-        "#define[ \t]+PHMAP_VERSION_PATCH[ \t]+([0-9]+)")
-    string(REGEX MATCH ${VERSION_REGEX} _ "${_header}")
-    # Use math to skip leading zeros if any.
-    math(EXPR PHMAP_VERSION_MAJOR ${CMAKE_MATCH_1})
-    math(EXPR PHMAP_VERSION_MINOR ${CMAKE_MATCH_2})
-    math(EXPR PHMAP_VERSION_PATCH ${CMAKE_MATCH_3})
-    string(JOIN "." PHMAP_VERSION ${PHMAP_VERSION_MAJOR}
-                                  ${PHMAP_VERSION_MINOR}
-                                  ${PHMAP_VERSION_PATCH})
-endmacro()
-
-set(PHMAP_VERSION ${PC_PHMAP_VERSION})
-if (NOT PHMAP_VERSION)
-    _phmap_get_version()
-endif()
-
-include(FindPackageHandleStandardArgs)
-find_package_handle_standard_args(phmap
-    FOUND_VAR PHMAP_FOUND
-    REQUIRED_VARS
-        PHMAP_INCLUDE_DIR
-    VERSION_VAR PHMAP_VERSION
-)
-
-if(PHMAP_FOUND)
-    set(PHMAP_INCLUDE_DIRS ${PHMAP_INCLUDE_DIR})
-    set(PHMAP_DEFINITIONS ${PC_PHMAP_CFLAGS_OTHER})
-endif()
-
-if(PHMAP_FOUND AND NOT TARGET phmap)
-    add_library(phmap INTERFACE IMPORTED)
-    set_target_properties(phmap PROPERTIES
-        INTERFACE_COMPILE_OPTIONS "${PC_PHMAP_CFLAGS_OTHER}"
-        INTERFACE_INCLUDE_DIRECTORIES "${PHMAP_INCLUDE_DIR}"
-    )
-endif()
-
-mark_as_advanced(PHMAP_INCLUDE_DIR)
diff --git a/external/CMakeLists.txt b/external/CMakeLists.txt
index b3742f0..0598b67 100644
--- a/external/CMakeLists.txt
+++ b/external/CMakeLists.txt
@@ -1,31 +1,59 @@
 # Distributed under the MIT License (See accompanying file /LICENSE)
 
-if (NOT TARGET abcresub)
-  add_library(abcresub INTERFACE)
-  target_include_directories(abcresub INTERFACE ${CMAKE_CURRENT_SOURCE_DIR}/abcresub)
+include(GNUInstallDirs)
+
+set(_external_libs)
+
+set(TWEEDLEDUM_CMAKECONFIG_INSTALL_DIR
+    "${CMAKE_INSTALL_DATAROOTDIR}/cmake/${PROJECT_NAME}"
+    CACHE STRING "install path for tweedledumConfig.cmake")
+
+if(NOT TWEEDLEDUM_EXTERNAL_EXPORT_NAME)
+  set(TWEEDLEDUM_EXTERNAL_EXPORT_NAME
+      "${PROJECT_NAME}TargetsExternal"
+      CACHE INTERNAL "")
+endif()
+
+macro(add_external_library name)
+  add_library(${name} INTERFACE)
+  list(APPEND _external_libs ${name})
+  target_include_directories(${name} SYSTEM INTERFACE $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/${name}>
+                                                      $<INSTALL_INTERFACE:include/tweedledum/external>)
+  install(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/${name}/${name}
+          DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/tweedledum/external)
+endmacro()
+
+# ==============================================================================
+
+if(NOT TARGET abcresub)
+  add_external_library(abcresub)
 endif()
 
 if (NOT TARGET libabcesop)
   set(STATIC_LIBABC true)
   add_subdirectory(abcesop)
+  list(APPEND _external_libs libabcesop)
 endif()
 
 # bill master branch: Nov.2020
-if (NOT TARGET bill)
-  add_library(bill INTERFACE)
-  target_include_directories(bill SYSTEM INTERFACE ${CMAKE_CURRENT_SOURCE_DIR}/bill)
+if(NOT TARGET bill)
+  add_external_library(bill)
 
   if(ENABLE_BILL_Z3)
     target_compile_definitions(bill INTERFACE BILL_HAS_Z3)
-    set(BILL_Z3_INCLUDE_PATH "" CACHE PATH "Path to Z3 includes, e.g., z3++.h")
-    set(BILL_Z3_LIBRARY_PATH "" CACHE PATH "Path to Z3 library, e.g., libz3.a")
+    set(BILL_Z3_INCLUDE_PATH
+        ""
+        CACHE PATH "Path to Z3 includes, e.g., z3++.h")
+    set(BILL_Z3_LIBRARY_PATH
+        ""
+        CACHE PATH "Path to Z3 library, e.g., libz3.a")
     if(NOT "${BILL_Z3_INCLUDE_PATH}" STREQUAL "")
       target_include_directories(bill SYSTEM INTERFACE ${BILL_Z3_INCLUDE_PATH})
     endif()
     if(NOT "${BILL_Z3_LIBRARY_PATH}" STREQUAL "")
       target_link_directories(bill INTERFACE ${BILL_Z3_LIBRARY_PATH})
     endif()
-    if (WIN32)
+    if(WIN32)
       target_link_libraries(bill INTERFACE libz3)
     else()
       target_link_libraries(bill INTERFACE z3)
@@ -34,28 +62,24 @@ if (NOT TARGET bill)
 endif()
 
 # kitty master branch: Oct.2020
-if (NOT TARGET kitty)
-  add_library(kitty INTERFACE)
-  target_include_directories(kitty SYSTEM INTERFACE ${CMAKE_CURRENT_SOURCE_DIR}/kitty)
+if(NOT TARGET kitty)
+  add_external_library(kitty)
 endif()
 
 # rang master branch: Nov.2020
-if (NOT TARGET rang)
-  add_library(rang INTERFACE)
-  target_include_directories(rang SYSTEM INTERFACE ${CMAKE_CURRENT_SOURCE_DIR}/rang)
+if(NOT TARGET rang)
+  add_external_library(rang)
 endif()
 
 # lorina master branch: Feb.2022
-if (NOT TARGET lorina)
-  add_library(lorina INTERFACE)
-  target_include_directories(lorina SYSTEM INTERFACE ${CMAKE_CURRENT_SOURCE_DIR}/lorina)
-  target_link_libraries(lorina INTERFACE rang fmt::fmt-header-only )
+if(NOT TARGET lorina)
+  add_external_library(lorina)
+  target_link_libraries(lorina INTERFACE rang fmt::fmt-header-only)
 endif()
 
 # percy master branch: Nov.2020
-if (NOT TARGET percy)
-  add_library(percy INTERFACE)
-  target_include_directories(percy SYSTEM INTERFACE ${CMAKE_CURRENT_SOURCE_DIR}/percy)
+if(NOT TARGET percy)
+  add_external_library(percy)
   target_compile_definitions(percy INTERFACE DISABLE_NAUTY)
 
   set(THREADS_PREFER_PTHREAD_FLAG ON)
@@ -65,26 +89,67 @@ if (NOT TARGET percy)
   set(ABC_USE_NAMESPACE "pabc")
   set(STATIC_LIBABC true)
   add_subdirectory(abcsat)
-  if (UNIX)
+  list(APPEND _external_libs libabcsat)
+  if(UNIX)
     target_compile_definitions(libabcsat PUBLIC "LIN64" ABC_NAMESPACE=pabc ABC_NO_USE_READLINE)
   elseif(WIN32)
-    target_compile_definitions(libabcsat PUBLIC ABC_NAMESPACE=pabc ABC_USE_NO_READLINE NOMINMAX  WIN32_NO_DLL _CRT_SECURE_NO_WARNINGS)
+    target_compile_definitions(libabcsat PUBLIC ABC_NAMESPACE=pabc ABC_USE_NO_READLINE NOMINMAX WIN32_NO_DLL
+                                                _CRT_SECURE_NO_WARNINGS)
   endif()
   target_link_libraries(percy INTERFACE libabcsat)
 endif()
 
+if(NOT TARGET phmap)
+  add_library(phmap INTERFACE)
+  list(APPEND _external_libs phmap)
+  target_include_directories(phmap SYSTEM INTERFACE $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/parallel_hashmap>
+                                                    $<INSTALL_INTERFACE:include/tweedledum/external>)
+  install(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/parallel_hashmap/parallel_hashmap
+          DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/tweedledum/external)
+endif()
+
 # mockturtle use_parallel_hashmap branch: Nov.2020
-if (NOT TARGET mockturtle)
-  add_library(mockturtle INTERFACE)
-  target_include_directories(mockturtle SYSTEM INTERFACE ${CMAKE_CURRENT_SOURCE_DIR}/mockturtle)
-  target_link_libraries(mockturtle INTERFACE kitty lorina phmap percy nlohmann_json bill libabcesop abcresub)
+if(NOT TARGET mockturtle)
+  add_external_library(mockturtle)
+  target_link_libraries(
+    mockturtle
+    INTERFACE kitty
+              lorina
+              phmap
+              percy
+              nlohmann_json::nlohmann_json
+              bill
+              libabcesop
+              abcresub)
 endif()
 
 # pybind11 2.6.0
-if(TWEEDLEDUM_USE_EXTERNAL_PYBIND11)
-    if (NOT TARGET pybind11)
-        find_package(pybind11 REQUIRED)
+if(NOT TARGET pybind11::pybind11)
+  find_package(pybind11 REQUIRED)
+
+  foreach(_tgt pybind11::module pybind11::lto pybind11::headers)
+    if(TARGET ${_tgt})
+      get_target_property(_aliased ${_tgt} ALIASED_TARGET)
+      if(_aliased)
+        set(_tgt ${_aliased})
+      endif()
+      set_target_properties(${_tgt} PROPERTIES IMPORTED_GLOBAL TRUE)
     endif()
-else()
-    add_subdirectory(pybind11 EXCLUDE_FROM_ALL)
+  endforeach()
 endif()
+
+# ==============================================================================$
+
+list(REMOVE_DUPLICATES _external_libs)
+
+install(
+  TARGETS ${_external_libs}
+  EXPORT "${TWEEDLEDUM_EXTERNAL_EXPORT_NAME}"
+  ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
+  LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
+  RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR})
+
+install(
+  EXPORT "${TWEEDLEDUM_EXTERNAL_EXPORT_NAME}"
+  NAMESPACE "tweedledum::"
+  DESTINATION ${TWEEDLEDUM_CMAKECONFIG_INSTALL_DIR})
diff --git a/external/abcesop/CMakeLists.txt b/external/abcesop/CMakeLists.txt
index 9682beb..93db0de 100644
--- a/external/abcesop/CMakeLists.txt
+++ b/external/abcesop/CMakeLists.txt
@@ -20,7 +20,9 @@ else()
     set_property(TARGET libabcesop PROPERTY OUTPUT_NAME libabcesop)
 endif()
 set_property(TARGET libabcesop PROPERTY POSITION_INDEPENDENT_CODE ON)
-target_include_directories(libabcesop INTERFACE ${PROJECT_SOURCE_DIR})
+target_include_directories(libabcesop INTERFACE $<BUILD_INTERFACE:${PROJECT_SOURCE_DIR}>
+                                                $<INSTALL_INTERFACE:include/tweedledum/external>)
+install(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/eabc DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/tweedledum/external)
 
 if (UNIX)
     target_compile_definitions(libabcesop PUBLIC "LIN64" ABC_NO_USE_READLINE)
diff --git a/external/abcsat/CMakeLists.txt b/external/abcsat/CMakeLists.txt
index edcec0a..f945dce 100644
--- a/external/abcsat/CMakeLists.txt
+++ b/external/abcsat/CMakeLists.txt
@@ -20,4 +20,6 @@ else()
     set_property(TARGET libabcsat PROPERTY OUTPUT_NAME libabcsat)
     set_property(TARGET libabcsat PROPERTY POSITION_INDEPENDENT_CODE ON)
 endif()
-target_include_directories(libabcsat INTERFACE ${PROJECT_SOURCE_DIR})
+target_include_directories(libabcsat INTERFACE $<BUILD_INTERFACE:${PROJECT_SOURCE_DIR}>
+                                               $<INSTALL_INTERFACE:include/tweedledum/external>)
+install(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/abc DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/tweedledum/external)
